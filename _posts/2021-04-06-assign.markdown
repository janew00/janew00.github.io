---
layout: single
title:  "ShortestPath_Dijkstra_Greedy5"
date:   2021-04-06 22:00:00 +0900
categories: jekyll update
---

### Dijkstra_Greedy5 

**1. 다익스트라 알고리즘이란 ?**
* 최단 경로를 찾는 가장 대표적인 알고리즘
* 그리디 알고리즘
* 프림 알고리즘과 달리 출발점이 주어진다.
* 각 index 별로 최적거리를 저장하는 배열 D[w]를 갱신하는 데 걸리는 시간은 O(n), 
  시간복잡도는 (n-1)X{O(n)+O(n)}=O(n^2) 이다.
* 네비게이션 등에 활용

**2. 다익스트라 순서**
###### (a). 시작 점에서 연결된 노드의 거리 업데이트
###### (b). 그 중 가장 거리가 짧은 노드로 이동
###### (c). 이동한 노드에서 다른 노드와의 거리 업데이트
###### (d). 시작 점에서 바로 간 거리가 더 짧은지 계산
###### (e). 더 짧은 거리로 업데이트 
###### =====>(n-1)만큼 반복 


**3. 문제**
```java
입력 : 가중치 그래프 G=(V,E), |V|=n(점의 수), |E|=m(선분의 수)
출력 : 출발점 s로부터 (n-1)개의 점까지 각각 최단 거리를 저장한 배열 D
배열 D를 무한대로 초기화시킨다. 단, D[s]= 0으로 초기화한다.
// 배열 D[v]에는 출발점 s로부터 점 v까지의 거리가 저장된다.
while ( s로부터의 최단 거리가 확정되지 않은 점이 있으면 ) {
   현재까지 s로부터 최단 거리가 확정되지 않은 각 점 v에 대해서 최소의 D[v]의 값을 가진 점 V_min을 선택하고, 출발점 s로부터 점 V_min까지의 최단 거리 D[V_min]을 확정시킨다.
  s로부터 현재보다 짧은 거리로 점 V_min을 통해 우회 가능한 각 점w에 대해서 D[w]를 갱신
}
return D
```


**4. 역할 분담**
* `Init()` : 값 랜덤으로 가중치 그래프 만들어서 출력하기 _ 김정윤
* `Shortestpath()`, `Update()` : 최적 경로 찾아 갱신해주기 _ 이진석, 임나정
* `main()` : 가중치 그래프 배열 G와 index별 최적경로를 저장할 배열 D 선언하고 출발점 s(1행 1열)에서 다른 점들까지의 최적 경로 출력 _ 김정윤, 이진석, 임나정

**5. 결과**



